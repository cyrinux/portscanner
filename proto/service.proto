syntax = "proto3";
package proto;
option go_package = "/proto";

message Host {
    string address = 1;
    string os_version = 2;
    string state = 3;
    string fqdn = 4;
}

message PortVersion {
   string low_version = 1;
   string high_version = 2;
   string extra_infos = 3;
   string product = 4;
}

message Port {
    string port_id = 1;
    string protocol = 2;
    string state = 3;
    string service_name = 4;
    PortVersion version = 5;
}

message HostResult {
    Host host = 1;
    repeated Port ports = 2;
}

message ScannerResponse {
    repeated HostResult host_result = 1;
    string start_time = 2;
    string end_time = 3;
    string expiration_time = 4;
    string key = 5;
    enum Status {
        UNKNOWN = 0;
        QUEUED = 1;
        RUNNING = 2;
        OK = 3;
        ERROR = 4;
        CANCEL = 5;
        TIMEOUT= 6;
      }
    Status status = 6;
}

message ParamsScannerRequest {
    string hosts = 1;
    string ports = 2;
    bool with_aggressive_scan = 3;
    bool with_syn_scan = 4;
    bool with_null_scan = 5;
    bool service_version_detection = 6;
    bool os_detection = 7;
    bool service_default_scripts = 8;
    int32 timeout = 9;
    bool ping_only = 10;
    int32 retention_time = 11;
    bool fast_mode = 12;
    string key = 13;
    int64 defer_duration = 14;
    string crontab = 15;
    int32 scan_speed = 16;
}

message TasksStatus {
    int64 success = 1;
    int64 failed = 2;
    int64 returned = 3;
    int64 ready = 4;
    int64 rejected = 5;
}

message PrometheusStatus {
    TasksStatus tasks_status = 1;
    int64 worker_count = 2;
    int64 consumer_count = 3;
}

message ScannerServiceControl {
    enum ServiceState {
        UNKNOWN = 0;
        START = 1;
        STOP = 2;
    }
    ServiceState state = 1;
}

message GetScannerRequest {
    string key = 1;
}

message ServerResponse{
    bool success = 1;
    string key = 2;
    ScannerResponse value = 3;
    string error = 4;
}

// Server ScannerService
service ScannerService {
    rpc StartAsyncScan(ParamsScannerRequest) returns (ServerResponse);
    rpc StartScan(ParamsScannerRequest) returns (ServerResponse);
    rpc GetScan(GetScannerRequest) returns (ServerResponse);
    rpc DeleteScan(GetScannerRequest) returns (ServerResponse);
    rpc ServiceControl(ScannerServiceControl) returns (ScannerServiceControl);
    rpc StreamServiceControl(ScannerServiceControl) returns (stream ScannerServiceControl);
    rpc StreamTasksStatus(stream PrometheusStatus) returns (stream PrometheusStatus);
}

