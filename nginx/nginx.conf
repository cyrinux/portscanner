worker_processes  1;

error_log  /var/log/nginx/error.log;

events {
    worker_connections  100;
}

http {
    log_format grpc_json escape=json '{"timestamp":"$time_iso8601","client":"$remote_addr",'
                                      '"uri":"$uri","http-status":$status,'
                                      '"grpc-status":$grpc_status,"upstream":"$upstream_addr"'
                                      '"rx-bytes":$request_length,"tx-bytes":$bytes_sent}';

    map $upstream_trailer_grpc_status $grpc_status {
        default $upstream_trailer_grpc_status; # We normally expect to receive grpc-status as a trailer
        ''      $sent_http_grpc_status;        # Else use the header, regardless of who generated it
    }

    access_log  /var/log/nginx/access.log grpc_json;


    upstream frontend_services {
        zone frontend_services 64k;
        server server1:9000;
        server server2:9000;
    }

    upstream backend_services {
        zone backend_services 64k;
        server server1:9001;
        server server2:9001;
    }

    server {
        listen       8080 ssl http2;

        # Error responses
        include conf.d/errors.grpc_conf; # gRPC-compliant error responses
        default_type application/grpc;   # Ensure gRPC for all error responses

        # Mutual TLS between gRPC client and nginx
        ssl_certificate cert/server-cert.pem;
        ssl_certificate_key cert/server-key.pem;

        ssl_client_certificate cert/ca-cert.pem;
        ssl_verify_client on;

        location /proto.AuthService {
            grpc_pass grpcs://frontend_services;
            # health_check type=grpc grpc_status=12; # 12=unimplemented

            # Mutual TLS between nginx and gRPC server
            grpc_ssl_certificate cert/server-cert.pem;
            grpc_ssl_certificate_key cert/server-key.pem;
        }

        location /proto.ScannerService {
            grpc_pass grpcs://frontend_services;
            # health_check type=grpc grpc_status=12; # 12=unimplemented

            # Mutual TLS between nginx and gRPC server
            grpc_ssl_certificate cert/server-cert.pem;
            grpc_ssl_certificate_key cert/server-key.pem;
        }

        location /proto.BackendService {
            grpc_pass grpcs://backend_services;
            # health_check type=grpc grpc_status=12; # 12=unimplemented

            # Mutual TLS between nginx and gRPC server
            grpc_ssl_certificate cert/server-cert.pem;
            grpc_ssl_certificate_key cert/server-key.pem;
        }
    }
}

# vim: syntax=nginx
